#-----------------------------------------------------------
#
# Simulation input parameters
#
#-----------------------------------------------------------

# title of job
title                           = X6000km by Z600km - Source at 1km

# forward or adjoint simulation
# 1 = forward, 2 = adjoint, 3 = both simultaneously
# note: 2 is purposely UNUSED (for compatibility with the numbering of our 3D codes)
SIMULATION_TYPE                 = 1
# 0 = regular wave propagation simulation, 1/2/3 = noise simulation
NOISE_TOMOGRAPHY                = 0
# save the last frame, needed for adjoint simulation
SAVE_FORWARD                    = .false.

# parameters concerning partitioning
NPROC                           = 16              # number of processes

# time step parameters
# total number of time steps
NSTEP                           = 20000

# duration of a time step (see section "How to choose the time step" of the manual for how to do this)
DT                              = 1.0d-1

# time stepping
# 1 = Newmark (2nd order), 2 = LDDRK4-6 (4th-order 6-stage low storage Runge-Kutta), 3 = classical RK4 4th-order 4-stage Runge-Kutta
time_stepping_scheme            = 1

# set the type of calculation (P-SV or SH/membrane waves)
P_SV                            = .true.

# axisymmetric (2.5D) or Cartesian planar (2D) simulation
AXISYM                          = .false.

#-----------------------------------------------------------
#
# Mesh
#
#-----------------------------------------------------------

# Partitioning algorithm for decompose_mesh
PARTITIONING_TYPE               = 3              # SCOTCH = 3, ascending order (very bad idea) = 1

# number of control nodes per element (4 or 9)
NGNOD                           = 4

# creates/reads a binary database that allows to skip all time consuming setup steps in initialization
# 0 = does not read/create database
# 1 = creates database
# 2 = reads database
setup_with_binary_database      = 0

# available models
#   default       - define model using nbmodels below
#   ascii         - read model from ascii database file
#   binary        - read model from binary databse file
#   binary_voigt  - read Voigt model from binary database file
#   external      - define model using define_external_model subroutine
#   gll           - read GLL model from binary database file
#   legacy        - read model from model_velocity.dat_input
MODEL                           = default

# Output the model with the requested type, does not save if turn to default or .false.
# (available output formats: ascii,binary,gll,legacy)
SAVE_MODEL                      = default


#-----------------------------------------------------------
#
# Attenuation
#
#-----------------------------------------------------------

# attenuation parameters
ATTENUATION_VISCOELASTIC        = .false.        # turn attenuation (viscoelasticity) on or off for non-poroelastic solid parts of the model
ATTENUATION_VISCOACOUSTIC       = .false.        # turn attenuation (viscoacousticity) on or off for non-poroelastic fluid parts of the model

# for viscoelastic or viscoacoustic attenuation
N_SLS                           = 3              # number of standard linear solids for attenuation (3 is usually the minimum)
ATTENUATION_f0_REFERENCE        = 5.196          # in case of attenuation, reference frequency in Hz at which the velocity values in the velocity model are given (unused otherwise); relevant only if source is a Dirac or a Heaviside, otherwise it is automatically set to f0 the dominant frequency of the source in the DATA/SOURCE file
READ_VELOCITIES_AT_f0           = .false.        # read seismic velocities at ATTENUATION_f0_REFERENCE instead of at infinite frequency (see user manual for more information)
USE_SOLVOPT                     = .false.        # use more precise but much more expensive way of determining the Q factor relaxation times, as in https://doi.org/10.1093/gji/ggw024

# for poroelastic attenuation
ATTENUATION_PORO_FLUID_PART     = .false.        # turn viscous attenuation on or off for the fluid part of poroelastic parts of the model
Q0_poroelastic                  = 1              # quality factor for viscous attenuation (ignore it if you are not using a poroelastic material)
freq0_poroelastic               = 10             # frequency for viscous attenuation (ignore it if you are not using a poroelastic material)

# to undo attenuation and/or PMLs for sensitivity kernel calculations or forward runs with SAVE_FORWARD
# use the flag below. It performs undoing of attenuation and/or of PMLs in an exact way for sensitivity kernel calculations
# but requires disk space for temporary storage, and uses a significant amount of memory used as buffers for temporary storage.
# When that option is on the second parameter indicates how often the code dumps restart files to disk (if in doubt, use something between 100 and 1000).
UNDO_ATTENUATION_AND_OR_PML     = .false.
NT_DUMP_ATTENUATION             = 20000

# Instead of reconstructing the forward wavefield, this option reads it from the disk using asynchronous I/O.
# Outperforms conventional mode using a value of NTSTEP_BETWEEN_COMPUTE_KERNELS high enough.
NO_BACKWARD_RECONSTRUCTION      = .false.

#-----------------------------------------------------------
#
# Sources
#
#-----------------------------------------------------------

# source parameters
NSOURCES                        = 1              # number of sources (source information is then read from the DATA/SOURCE file)
force_normal_to_surface         = .false.        # angleforce normal to surface (external mesh and curve file needed)

# use an existing initial wave field as source or start from zero (medium initially at rest)
initialfield                    = .false.
add_Bielak_conditions_bottom    = .false.        # add Bielak conditions or not if initial plane wave
add_Bielak_conditions_right     = .false.
add_Bielak_conditions_top       = .false.
add_Bielak_conditions_left      = .false.

# acoustic forcing
ACOUSTIC_FORCING                = .false.        # acoustic forcing of an acoustic medium with a rigid interface

# noise simulations - type of noise source time function:
# 0=external (S_squared), 1=Ricker(second derivative), 2=Ricker(first derivative), 3=Gaussian, 4=Figure 2a of Tromp et al. 2010
# (default value 4 is chosen to reproduce the time function from Fig 2a of "Tromp et al., 2010, Noise Cross-Correlation Sensitivity Kernels")
noise_source_time_function_type = 4

# moving sources
# Set write_moving_sources_database to .true. if the generation of moving source databases takes
# a long time. Then the simulation is done in two steps: first you run the code and it writes the databases to file
# (in DATA folder by default). Then you rerun the code and it will read the databases in there directly possibly
# saving a lot of time.
# This is only useful for GPU version (for now)
write_moving_sources_database   = .false.

#-----------------------------------------------------------
#
# Receivers
#
#-----------------------------------------------------------

# receiver set parameters for recording stations (i.e. recording points)
# seismotype : record 1=displ 2=veloc 3=accel 4=pressure 5=curl of displ 6=the fluid potential
seismotype                      = 1              # several values can be chosen. For example : 1,2,4

# interval in time steps for writing of seismograms
# every how many time steps we save the seismograms
# (costly, do not use a very small value; if you use a very large value that is larger than the total number
#  of time steps of the run, the seismograms will automatically be saved once at the end of the run anyway)
NTSTEP_BETWEEN_OUTPUT_SEISMOS   = 20000

# set to n to reduce the sampling rate of output seismograms by a factor of n
# defaults to 1, which means no down-sampling
NTSTEP_BETWEEN_OUTPUT_SAMPLE    = 1

# so far, this option can only be used if all the receivers are in acoustic elements
USE_TRICK_FOR_BETTER_PRESSURE   = .false.

# use this t0 as earliest starting time rather than the automatically calculated one
USER_T0                         = 0.0d0

# seismogram formats
save_ASCII_seismograms          = .true.         # save seismograms in ASCII format or not
save_binary_seismograms_single  = .true.         # save seismograms in single precision binary format or not (can be used jointly with ASCII above to save both)
save_binary_seismograms_double  = .false.        # save seismograms in double precision binary format or not (can be used jointly with both flags above to save all)
SU_FORMAT                       = .false.        # output single precision binary seismograms in Seismic Unix format (adjoint traces will be read in the same format)

# use an existing STATION file found in ./DATA or create a new one from the receiver positions below in this Par_file
use_existing_STATIONS           = .false.

# number of receiver sets (i.e. number of receiver lines to create below)
nreceiversets                   = 1

# orientation
anglerec                        = 0.d0          # angle to rotate components at receivers
rec_normal_to_surface           = .false.        # base anglerec normal to surface (external mesh and curve file needed)

# first receiver set (repeat these 6 lines and adjust nreceiversets accordingly)
nrec                            = 4001             # number of receivers
xdeb                            = 1000000.           # first receiver x in meters
zdeb                            = 0.          # first receiver z in meters
xfin                            = 5000000.          # last receiver x in meters (ignored if only one receiver)
zfin                            = 0.          # last receiver z in meters (ignored if only one receiver)
record_at_surface_same_vertical = .true.         # receivers inside the medium or at the surface (z values are ignored if this is set to true, they are replaced with the topography height)

# second receiver set (repeat these 6 lines and adjust nreceiversets accordingly)
nrec                            = 14             # number of receivers
xdeb                            = 250000.           # first receiver x in meters
zdeb                            = 200000.          # first receiver z in meters
xfin                            = 250000.          # last receiver x in meters (ignored if only one receiver)
zfin                            = 0.          # last receiver z in meters (ignored if only one receiver)
record_at_surface_same_vertical = .false.         # receivers inside the medium or at the surface (z values are ignored if this is set to true, they are replaced with the topography height)
#
#
#-----------------------------------------------------------
#
# adjoint kernel outputs
#
#-----------------------------------------------------------

# save sensitivity kernels in ASCII format (much bigger files, but compatible with current GMT scripts) or in binary format
save_ASCII_kernels              = .true.

# since the accuracy of kernel integration may not need to respect the CFL, this option permits to save computing time, and memory with UNDO_ATTENUATION_AND_OR_PML mode
NTSTEP_BETWEEN_COMPUTE_KERNELS  = 1

# outputs approximate Hessian for preconditioning
APPROXIMATE_HESS_KL             = .false.

#-----------------------------------------------------------
#
# Boundary conditions
#
#-----------------------------------------------------------

# Perfectly Matched Layer (PML) boundaries
# absorbing boundary active or not
PML_BOUNDARY_CONDITIONS         = .true.
NELEM_PML_THICKNESS             = 3
ROTATE_PML_ACTIVATE             = .false.
ROTATE_PML_ANGLE                = 30.
# change the four parameters below only if you know what you are doing; they change the damping profiles inside the PMLs
K_MIN_PML                       = 1.0d0          # from Gedney page 8.11
K_MAX_PML                       = 1.0d0
damping_change_factor_acoustic  = 0.5d0
damping_change_factor_elastic   = 1.0d0
# set the parameter below to .false. unless you know what you are doing; this implements automatic adjustment of the PML parameters for elongated models.
# The goal is to improve the absorbing efficiency of PML for waves with large incidence angles, but this can lead to artefacts.
# In particular, this option is efficient only when the number of sources NSOURCES is equal to one.
PML_PARAMETER_ADJUSTMENT        = .false.

# Stacey ABC
STACEY_ABSORBING_CONDITIONS     = .false.

# periodic boundaries
ADD_PERIODIC_CONDITIONS         = .false.
PERIODIC_HORIZ_DIST             = 4000.d0

#-----------------------------------------------------------
#
# Velocity and density models
#
#-----------------------------------------------------------

# number of model materials
nbmodels		= 120
# available material types (see user manual for more information)
#   acoustic:              model_number 1 rho Vp 0  0 0 QKappa 9999 0 0 0 0 0 0 (for QKappa use 9999 to ignore it)
#   elastic:               model_number 1 rho Vp Vs 0 0 QKappa Qmu  0 0 0 0 0 0 (for QKappa and Qmu use 9999 to ignore them)
#   anisotropic:           model_number 2 rho c11 c13 c15 c33 c35 c55 c12 c23 c25   0 QKappa Qmu
#   anisotropic in AXISYM: model_number 2 rho c11 c13 c15 c33 c35 c55 c12 c23 c25 c22 QKappa Qmu
#   poroelastic:           model_number 3 rhos rhof phi c kxx kxz kzz Ks Kf Kfr etaf mufr Qmu
#   tomo:                  model_number -1 0 0 A 0 0 0 0 0 0 0 0 0 0
#
# note: When viscoelasticity or viscoacousticity is turned on,
#       the Vp and Vs values that are read here are the UNRELAXED ones i.e. the values at infinite frequency
#       unless the READ_VELOCITIES_AT_f0 parameter above is set to true, in which case they are the values at frequency f0.
#
#       Please also note that Qmu is always equal to Qs, but Qkappa is in general not equal to Qp.
#       To convert one to the other see doc/Qkappa_Qmu_versus_Qp_Qs_relationship_in_2D_plane_strain.pdf and
#       utils/attenuation/conversion_from_Qkappa_Qmu_to_Qp_Qs_from_Dahlen_Tromp_959_960.f90.

# Start_Material
1 1 2550.d0 5100.d0 3029.d0 0 0 9999 9999 0 0 0 0 0 0
2 1 2784.d0 6300.d0 3678.d0 0 0 9999 9999 0 0 0 0 0 0
3 1 2820.d0 6449.d0 3754.d0 0 0 9999 9999 0 0 0 0 0 0
4 1 2838.d0 6520.d0 3790.d0 0 0 9999 9999 0 0 0 0 0 0
5 1 2961.d0 6975.d0 4020.d0 0 0 9999 9999 0 0 0 0 0 0
6 1 2967.d0 6995.d0 4030.d0 0 0 9999 9999 0 0 0 0 0 0
7 1 2972.d0 7015.d0 4040.d0 0 0 9999 9999 0 0 0 0 0 0
8 1 2972.d0 7015.d0 4040.d0 0 0 9999 9999 0 0 0 0 0 0
9 1 3031.d0 7213.d0 4140.d0 0 0 9999 9999 0 0 0 0 0 0
10 1 3031.d0 7213.d0 4140.d0 0 0 9999 9999 0 0 0 0 0 0
11 1 3104.d0 7448.d0 4260.d0 0 0 9999 9999 0 0 0 0 0 0
12 1 3104.d0 7448.d0 4260.d0 0 0 9999 9999 0 0 0 0 0 0
13 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
14 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
15 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
16 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
17 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
18 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
19 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
20 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
21 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
22 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
23 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
24 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
25 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
26 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
27 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
28 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
29 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
30 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
31 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
32 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
33 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
34 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
35 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
36 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
37 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
38 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
39 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
40 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
41 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
42 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
43 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
44 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
45 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
46 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
47 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
48 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
49 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
50 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
51 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
52 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
53 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
54 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
55 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
56 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
57 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
58 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
59 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
60 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
61 1 2605.d0 5424.d0 3213.d0 0 0 9999 9999 0 0 0 0 0 0
62 1 2716.d0 5995.d0 3520.d0 0 0 9999 9999 0 0 0 0 0 0
63 1 2797.d0 6353.d0 3705.d0 0 0 9999 9999 0 0 0 0 0 0
64 1 2923.d0 6841.d0 3952.d0 0 0 9999 9999 0 0 0 0 0 0
65 1 3193.d0 7718.d0 4400.d0 0 0 9999 9999 0 0 0 0 0 0
66 1 3187.d0 7699.d0 4390.d0 0 0 9999 9999 0 0 0 0 0 0
67 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
68 1 3180.d0 7680.d0 4380.d0 0 0 9999 9999 0 0 0 0 0 0
69 1 3168.d0 7641.d0 4360.d0 0 0 9999 9999 0 0 0 0 0 0
70 1 3168.d0 7641.d0 4360.d0 0 0 9999 9999 0 0 0 0 0 0
71 1 3206.d0 7756.d0 4420.d0 0 0 9999 9999 0 0 0 0 0 0
72 1 3206.d0 7756.d0 4420.d0 0 0 9999 9999 0 0 0 0 0 0
73 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
74 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
75 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
76 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
77 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
78 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
79 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
80 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
81 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
82 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
83 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
84 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
85 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
86 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
87 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
88 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
89 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
90 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
91 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
92 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
93 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
94 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
95 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
96 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
97 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
98 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
99 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
100 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
101 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
102 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
103 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
104 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
105 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
106 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
107 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
108 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
109 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
110 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
111 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
112 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
113 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
114 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
115 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
116 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
117 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
118 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
119 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
120 1 3258.d0 7906.d0 4500.d0 0 0 9999 9999 0 0 0 0 0 0
# End_Material

# external tomography file
TOMOGRAPHY_FILE                 = ./DATA/tomo_file.xyz

# use an external mesh created by an external meshing tool or use the internal mesher
read_external_mesh              = .false.

#-----------------------------------------------------------
#
# PARAMETERS FOR EXTERNAL MESHING
#
#-----------------------------------------------------------

# data concerning mesh, when generated using third-party app (more info in README)
# (see also absorbing_conditions above)
mesh_file                       = ./DATA/mesh_file          # file containing the mesh
nodes_coords_file               = ./DATA/nodes_coords_file  # file containing the nodes coordinates
materials_file                  = ./DATA/materials_file     # file containing the material number for each element
free_surface_file               = ./DATA/free_surface_file  # file containing the free surface
axial_elements_file             = ./DATA/axial_elements_file   # file containing the axial elements if AXISYM is true
absorbing_surface_file          = ./DATA/absorbing_surface_file   # file containing the absorbing surface
acoustic_forcing_surface_file   = ./DATA/MSH/Surf_acforcing_Bottom_enforcing_mesh   # file containing the acoustic forcing surface
absorbing_cpml_file             = ./DATA/absorbing_cpml_file   # file containing the CPML element numbers
tangential_detection_curve_file = ./DATA/courbe_eros_nodes  # file containing the curve delimiting the velocity model

#-----------------------------------------------------------
#
# PARAMETERS FOR INTERNAL MESHING
#
#-----------------------------------------------------------

# file containing interfaces for internal mesh
interfacesfile                  = topo.dat

# geometry of the model (origin lower-left corner = 0,0) and mesh description
xmin                            = 0.d0           # abscissa of left side of the model
xmax                            = 6000000.d0        # abscissa of right side of the model
nx                              = 600            # number of elements along X

# absorbing boundary parameters (see absorbing_conditions above)
absorbbottom                    = .true.
absorbright                     = .true.
absorbtop                       = .false.
absorbleft                      = .true.

# define the different regions of the model in the (nx,nz) spectral-element mesh
nbregions		= 120
# format of each line: nxmin nxmax nzmin nzmax material_number

# Start_Region
1 300 60 60 1
1 300 59 59 2
1 300 58 58 3
1 300 57 57 4
1 300 56 56 5
1 300 55 55 6
1 300 54 54 7
1 300 53 53 8
1 300 52 52 9
1 300 51 51 10
1 300 50 50 11
1 300 49 49 12
1 300 48 48 13
1 300 47 47 14
1 300 46 46 15
1 300 45 45 16
1 300 44 44 17
1 300 43 43 18
1 300 42 42 19
1 300 41 41 20
1 300 40 40 21
1 300 39 39 22
1 300 38 38 23
1 300 37 37 24
1 300 36 36 25
1 300 35 35 26
1 300 34 34 27
1 300 33 33 28
1 300 32 32 29
1 300 31 31 30
1 300 30 30 31
1 300 29 29 32
1 300 28 28 33
1 300 27 27 34
1 300 26 26 35
1 300 25 25 36
1 300 24 24 37
1 300 23 23 38
1 300 22 22 39
1 300 21 21 40
1 300 20 20 41
1 300 19 19 42
1 300 18 18 43
1 300 17 17 44
1 300 16 16 45
1 300 15 15 46
1 300 14 14 47
1 300 13 13 48
1 300 12 12 49
1 300 11 11 50
1 300 10 10 51
1 300 9 9 52
1 300 8 8 53
1 300 7 7 54
1 300 6 6 55
1 300 5 5 56
1 300 4 4 57
1 300 3 3 58
1 300 2 2 59
1 300 1 1 60
301 600 60 60 61
301 600 59 59 62
301 600 58 58 63
301 600 57 57 64
301 600 56 56 65
301 600 55 55 66
301 600 54 54 67
301 600 53 53 68
301 600 52 52 69
301 600 51 51 70
301 600 50 50 71
301 600 49 49 72
301 600 48 48 73
301 600 47 47 74
301 600 46 46 75
301 600 45 45 76
301 600 44 44 77
301 600 43 43 78
301 600 42 42 79
301 600 41 41 80
301 600 40 40 81
301 600 39 39 82
301 600 38 38 83
301 600 37 37 84
301 600 36 36 85
301 600 35 35 86
301 600 34 34 87
301 600 33 33 88
301 600 32 32 89
301 600 31 31 90
301 600 30 30 91
301 600 29 29 92
301 600 28 28 93
301 600 27 27 94
301 600 26 26 95
301 600 25 25 96
301 600 24 24 97
301 600 23 23 98
301 600 22 22 99
301 600 21 21 100
301 600 20 20 101
301 600 19 19 102
301 600 18 18 103
301 600 17 17 104
301 600 16 16 105
301 600 15 15 106
301 600 14 14 107
301 600 13 13 108
301 600 12 12 109
301 600 11 11 110
301 600 10 10 111
301 600 9 9 112
301 600 8 8 113
301 600 7 7 114
301 600 6 6 115
301 600 5 5 116
301 600 4 4 117
301 600 3 3 118
301 600 2 2 119
301 600 1 1 120
# End_Region

#-----------------------------------------------------------
#
# Display parameters
#
#-----------------------------------------------------------

# interval at which we output time step info and max of norm of displacement
# (every how many time steps we display information about the simulation. costly, do not use a very small value)
NTSTEP_BETWEEN_OUTPUT_INFO      = 200

# meshing output
output_grid_Gnuplot             = .false.        # generate a GNUPLOT file containing the grid, and a script to plot it
output_grid_ASCII               = .true.        # dump the grid in an ASCII text file consisting of a set of X,Y,Z points or not

# to plot total energy curves, for instance to monitor how CPML absorbing layers behave;
# should be turned OFF in most cases because a bit expensive
OUTPUT_ENERGY                   = .false.

# every how many time steps we compute energy (which is a bit expensive to compute)
NTSTEP_BETWEEN_OUTPUT_ENERGY    = 20000

# Compute the field int_0^t v^2 dt for a set of GLL points and write it to file. Use
# the script utils/visualisation/plotIntegratedEnergyFile.py to watch. It is refreshed at the same time than the seismograms
COMPUTE_INTEGRATED_ENERGY_FIELD = .false.

#-----------------------------------------------------------
#
# Movies/images/snaphots visualizations
#
#-----------------------------------------------------------

# every how many time steps we draw JPEG or PostScript pictures of the simulation
# and/or we dump results of the simulation as ASCII or binary files (costly, do not use a very small value)
NTSTEP_BETWEEN_OUTPUT_IMAGES    = 200

# minimum amplitude kept in % for the JPEG and PostScript snapshots; amplitudes below that are muted
cutsnaps                        = 1.

#### for JPEG color images ####
output_color_image              = .true.         # output JPEG color image of the results every NTSTEP_BETWEEN_OUTPUT_IMAGES time steps or not
imagetype_JPEG                  = 3              # display 1=displ_Ux 2=displ_Uz 3=displ_norm 4=veloc_Vx 5=veloc_Vz 6=veloc_norm 7=accel_Ax 8=accel_Az 9=accel_norm 10=pressure
factor_subsample_image          = 1.0d0          # (double precision) factor to subsample or oversample (if set to e.g. 0.5) color images output by the code (useful for very large models, or to get nicer looking denser pictures)
USE_CONSTANT_MAX_AMPLITUDE      = .false.        # by default the code normalizes each image independently to its maximum; use this option to use the global maximum below instead
CONSTANT_MAX_AMPLITUDE_TO_USE   = 1.17d4         # constant maximum amplitude to use for all color images if the above USE_CONSTANT_MAX_AMPLITUDE option is true
POWER_DISPLAY_COLOR             = 0.30d0         # non linear display to enhance small amplitudes in JPEG color images
DRAW_SOURCES_AND_RECEIVERS      = .true.         # display sources as orange crosses and receivers as green squares in JPEG images or not
DRAW_WATER_IN_BLUE              = .true.         # display acoustic layers as constant blue in JPEG images, because they likely correspond to water in the case of ocean acoustics or in the case of offshore oil industry experiments (if off, display them as greyscale, as for elastic or poroelastic elements, for instance for acoustic-only oil industry models of solid media)
USE_SNAPSHOT_NUMBER_IN_FILENAME = .false.        # use snapshot number in the file name of JPEG color snapshots instead of the time step (for instance to create movies in an easier way later)

#### for PostScript snapshots ####
output_postscript_snapshot      = .false.         # output Postscript snapshot of the results every NTSTEP_BETWEEN_OUTPUT_IMAGES time steps or not
imagetype_postscript            = 1              # display 1=displ vector 2=veloc vector 3=accel vector; small arrows are displayed for the vectors
meshvect                        = .true.         # display mesh on PostScript plots or not
modelvect                       = .false.        # display velocity model on PostScript plots or not
boundvect                       = .true.         # display boundary conditions on PostScript plots or not
interpol                        = .true.         # interpolation of the PostScript display on a regular grid inside each spectral element, or use the non-evenly spaced GLL points
pointsdisp                      = 6              # number of points in each direction for interpolation of PostScript snapshots (set to 1 for lower-left corner only)
subsamp_postscript              = 1              # subsampling of background velocity model in PostScript snapshots
sizemax_arrows                  = 1.d0           # maximum size of arrows on PostScript plots in centimeters
US_LETTER                       = .false.        # use US letter or European A4 paper for PostScript plots

#### for wavefield dumps ####
output_wavefield_dumps          = .false.        # output wave field to a text file (creates very big files)
imagetype_wavefield_dumps       = 1              # display 1=displ vector 2=veloc vector 3=accel vector 4=pressure
use_binary_for_wavefield_dumps  = .false.        # use ASCII or single-precision binary format for the wave field dumps

#-----------------------------------------------------------

# Ability to run several calculations (several earthquakes)
# in an embarrassingly-parallel fashion from within the same run;
# this can be useful when using a very large supercomputer to compute
# many earthquakes in a catalog, in which case it can be better from
# a batch job submission point of view to start fewer and much larger jobs,
# each of them computing several earthquakes in parallel.
# To turn that option on, set parameter NUMBER_OF_SIMULTANEOUS_RUNS to a value greater than 1.
# To implement that, we create NUMBER_OF_SIMULTANEOUS_RUNS MPI sub-communicators,
# each of them being labeled "my_local_mpi_comm_world", and we use them
# in all the routines in "src/shared/parallel.f90", except in MPI_ABORT() because in that case
# we need to kill the entire run.
# When that option is on, of course the number of processor cores used to start
# the code in the batch system must be a multiple of NUMBER_OF_SIMULTANEOUS_RUNS,
# all the individual runs must use the same number of processor cores,
# which as usual is NPROC in the Par_file,
# and thus the total number of processor cores to request from the batch system
# should be NUMBER_OF_SIMULTANEOUS_RUNS * NPROC.
# All the runs to perform must be placed in directories called run0001, run0002, run0003 and so on
# (with exactly four digits).
#
# Imagine you have 10 independent calculations to do, each of them on 100 cores; you have three options:
#
# 1/ submit 10 jobs to the batch system
#
# 2/ submit a single job on 1000 cores to the batch, and in that script create a sub-array of jobs to start 10 jobs,
# each running on 100 cores (see e.g. http://www.schedmd.com/slurmdocs/job_array.html )
#
# 3/ submit a single job on 1000 cores to the batch, start SPECFEM2D on 1000 cores, create 10 sub-communicators,
# cd into one of 10 subdirectories (called e.g. run0001, run0002,... run0010) depending on the sub-communicator
# your MPI rank belongs to, and run normally on 100 cores using that sub-communicator.
#
# The option below implements 3/.
#
NUMBER_OF_SIMULTANEOUS_RUNS     = 1

# if we perform simultaneous runs in parallel, if only the source and receivers vary between these runs
# but not the mesh nor the model (velocity and density) then we can also read the mesh and model files
# from a single run in the beginning and broadcast them to all the others; for a large number of simultaneous
# runs for instance when solving inverse problems iteratively this can DRASTICALLY reduce I/Os to disk in the solver
# (by a factor equal to NUMBER_OF_SIMULTANEOUS_RUNS), and reducing I/Os is crucial in the case of huge runs.
# Thus, always set this option to .true. if the mesh and the model are the same for all simultaneous runs.
# In that case there is no need to duplicate the mesh and model file database (the content of the DATABASES_MPI
# directories) in each of the run0001, run0002,... directories, it is sufficient to have one in run0001
# and the code will broadcast it to the others)
BROADCAST_SAME_MESH_AND_MODEL   = .true.

#-----------------------------------------------------------

# set to true to use GPUs
GPU_MODE                        = .false.

